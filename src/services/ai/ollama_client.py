# src/services/ai/ollama_client.py
import requests
import json
import sys
from typing import Dict, List

class OllamaClient:
    def __init__(self, base_url: str = "http://localhost:11434"):
        self.base_url = base_url
        self.available = False
        
        # Test Ollama connection
        try:
            response = requests.get(f"{self.base_url}/api/tags", timeout=2)
            if response.status_code == 200:
                self.available = True
                print("‚úÖ Ollama server available")
            else:
                print("‚ö†Ô∏è Ollama server not responding")
        except Exception as e:
            print(f"‚ö†Ô∏è Ollama not available: {e}")
            print("üí° Meeting protocols will use fallback generation")
        
    def generate_protocol(self, transcript: str, speakers: List[Dict], 
                         model: str = "llama3") -> str:
        """Protokoll-Generierung via Ollama mit erweiterten Prompt-Strategien"""
        
        if not self.available:
            print("‚ö†Ô∏è Ollama not available - using fallback protocol generation")
            return self._generate_fallback_protocol(transcript, speakers)
        
        print(f"ü§ñ [OLLAMA] Using model: {model}")
        
        # Enhanced speaker information with names
        speaker_info = ""
        if speakers:
            unique_speakers = {}
            for speaker in speakers:
                speaker_id = speaker.get('speaker', speaker.get('original_id', 'Unknown'))
                speaker_name = speaker.get('name', f"Person {len(unique_speakers) + 1}")
                if speaker_id not in unique_speakers:
                    unique_speakers[speaker_id] = speaker_name
            
            speaker_info = "TEILNEHMER:\n" + "\n".join([
                f"- {name} (als {speaker_id} erkannt)" 
                for speaker_id, name in unique_speakers.items()
            ])
        else:
            speaker_info = "TEILNEHMER:\n- Ein Sprecher erkannt"
        
        # Vereinfachter und direkter Prompt f√ºr bessere Ergebnisse
        prompt = f"""Analysiere das folgende Meeting-Transkript und erstelle ein strukturiertes Protokoll.

{speaker_info}

TRANSKRIPT:
{transcript}

Erstelle GENAU dieses Format - NUR die 9 Punkte, keine zus√§tzlichen Informationen:

# Meeting-Protokoll

**1. Anwesende:**
[Namen der Teilnehmer]

**2. Thema des Gespr√§chs:**
[Hauptthema in 1-2 S√§tzen]

**3. Terminabsprachen:**
[Termine und Deadlines oder "‚Äî"]

**4. Vereinbarungen:**
[Getroffene Entscheidungen oder "‚Äî"]

**5. √úbereink√ºnfte:**
[Absprachen oder "‚Äî"]

**6. Besprochene Probleme:**
[Diskutierte Probleme oder "‚Äî"]

**7. Offene Punkte f√ºr das n√§chste Gespr√§ch:**
[Vertage Themen oder "‚Äî"]

**8. N√§chster Termin zum Treffen:**
[Folgetermine oder "‚Äî"]

**9. Aufgaben:**
[Wer macht was bis wann oder "‚Äî"]

WICHTIG: 
- NUR diese 9 Punkte
- Keine Zeitstempel
- Keine w√∂rtlichen Zitate  
- Kurze Stichpunkte
- Bei leeren Punkten: "‚Äî"
- Verwende die echten Namen der Teilnehmer"""
        
        try:
            response = requests.post(f'{self.base_url}/api/generate', 
                json={
                    "model": model,
                    "prompt": prompt,
                    "stream": False
                }, timeout=30)
            
            if response.status_code == 200:
                return response.json()["response"]
            else:
                print(f"‚ö†Ô∏è Ollama API error: {response.text}")
                return self._generate_fallback_protocol(transcript, speakers)
        except Exception as e:
            print(f"‚ö†Ô∏è Ollama request failed: {e}")
            return self._generate_fallback_protocol(transcript, speakers)
    
    def _generate_fallback_protocol(self, transcript: str, speakers: List[Dict]) -> str:
        """Fallback-Protokoll ohne LLM - mit strukturiertem 9-Punkte-Format"""
        
        # Einfache Textanalyse f√ºr Fallback
        words = transcript.lower().split()
        
        # Keywords f√ºr verschiedene Kategorien
        decision_keywords = ["entscheidung", "beschluss", "beschlie√üen", "entscheiden", "beschlossen"]
        action_keywords = ["aufgabe", "todo", "erledigen", "zust√§ndig", "verantwortlich", "bis", "deadline"]
        time_keywords = ["termin", "deadline", "bis", "n√§chste woche", "montag", "dienstag", "mittwoch"]
        
        # Speaker-Liste erstellen
        unique_speakers = list(set([s['speaker'] for s in speakers])) if speakers else ["Sprecher 1"]
        speaker_names = []
        
        # Versuche Sprecher-Namen zu extrahieren, falls verf√ºgbar
        for speaker in speakers:
            if 'name' in speaker and speaker['name']:
                speaker_names.append(speaker['name'])
        
        if not speaker_names:
            speaker_names = unique_speakers
        
        speaker_list = ", ".join(speaker_names)
        
        # Einfache Struktur generieren im 9-Punkte-Format
        protocol = f"""# Meeting-Protokoll

**1. Anwesende:**
{speaker_list}

**2. Thema des Gespr√§chs:**
Meeting-Diskussion (automatisch erkannt aus Audio-Transkription)

**3. Terminabsprachen:**
{self._extract_simple_info(transcript, time_keywords, "‚Äî")}

**4. Vereinbarungen:**
{self._extract_simple_info(transcript, decision_keywords, "‚Äî")}

**5. √úbereink√ºnfte:**
‚Äî

**6. Besprochene Probleme:**
‚Äî

**7. Offene Punkte f√ºr das n√§chste Gespr√§ch:**
‚Äî

**8. N√§chster Termin zum Treffen:**
‚Äî

**9. Aufgaben:**
{self._extract_simple_info(transcript, action_keywords, "‚Äî")}

---

‚ö†Ô∏è **Hinweis**: Automatisch generiertes Basis-Protokoll. F√ºr detaillierte KI-Analyse bitte Ollama-Server mit LLM-Modell verwenden.
"""
        
        return protocol
    
    def _extract_simple_info(self, transcript: str, keywords: List[str], default: str) -> str:
        """Einfache Keyword-basierte Extraktion f√ºr Fallback"""
        sentences = transcript.split('.')
        relevant_sentences = []
        
        for sentence in sentences:
            sentence = sentence.strip()
            if any(keyword in sentence.lower() for keyword in keywords):
                relevant_sentences.append(f"‚Ä¢ {sentence}")
                if len(relevant_sentences) >= 3:  # Maximal 3 Punkte
                    break
        
        return "\n".join(relevant_sentences) if relevant_sentences else default
    
    def get_structured_protocol_prompt(self, transcript: str, speakers: List[Dict]) -> Dict:
        """Gibt einen strukturierten JSON-Prompt f√ºr das 9-Punkte-Protokoll zur√ºck"""
        
        # Enhanced speaker information with names
        speaker_info = ""
        if speakers:
            unique_speakers = {}
            for speaker in speakers:
                speaker_id = speaker.get('speaker', speaker.get('original_id', 'Unknown'))
                speaker_name = speaker.get('name', f"Person {len(unique_speakers) + 1}")
                if speaker_id not in unique_speakers:
                    unique_speakers[speaker_id] = speaker_name
            
            speaker_info = "TEILNEHMER:\n" + "\n".join([
                f"- {name} (als {speaker_id} erkannt)" 
                for speaker_id, name in unique_speakers.items()
            ])
        else:
            speaker_info = "TEILNEHMER:\n- Ein Sprecher erkannt"
        
        # Strukturierter JSON-Prompt
        prompt_content = f"""Du bist ein professioneller Meeting-Protokollant. Fasse das folgende Transkript sehr kompakt in ein strukturiertes Ergebnisprotokoll mit maximal 9 Punkten zusammen:

{speaker_info}

TRANSKRIPTION:
{transcript}

STRUKTUR:
1. Anwesende
2. Thema des Gespr√§chs
3. Terminabsprachen
4. Vereinbarungen
5. √úbereink√ºnfte
6. Besprochene Probleme
7. Offene Punkte f√ºr das n√§chste Gespr√§ch
8. N√§chster Termin zum Treffen
9. Aufgaben die erledigt werden m√ºssen und von wem

REGELN:
- Keine w√∂rtlichen Zitate
- Kein Flie√ütext
- Keine Wiederholung unwichtiger Aussagen
- Nur das Wesentliche extrahieren
- Verwende die echten Namen der Teilnehmer
- Wenn ein Punkt nicht relevant ist, schreibe "‚Äî" oder "nicht besprochen"
- Maximal 3-5 Stichpunkte pro Kategorie

Erstelle nur das strukturierte Protokoll, keine zus√§tzlichen Kommentare."""
        
        return {
            "role": "system",
            "content": prompt_content,
            "format": "9-point-structured-protocol",
            "transcript_length": len(transcript),
            "speaker_count": len(speakers) if speakers else 1,
            "expected_sections": [
                "Anwesende",
                "Thema des Gespr√§chs", 
                "Terminabsprachen",
                "Vereinbarungen",
                "√úbereink√ºnfte",
                "Besprochene Probleme",
                "Offene Punkte f√ºr das n√§chste Gespr√§ch",
                "N√§chster Termin zum Treffen",
                "Aufgaben"
            ]
        }